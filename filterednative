[Null
,Para [Link ("",[],[]) [] ("../../std/index.html","")]
,Null
,Para [Str "Trait",Str " ",Str "AsRef"]
,Null
,Null
,Null
,Div ("",[],[])
 [Header 1 ("",[],[]) [Str "Trait",Str " ",Link ("",[],[]) [Str "std"] ("../index.html",""),Str "::",Link ("",[],[]) [Str "convert"] ("index.html",""),Str "::",Link ("",[],[]) [Str "AsRef"] ("","")]
 ,Div ("",[],[])
  [CodeBlock ("",["rust","trait"],[]) "pub trait AsRef<T> where\n\160\160\160\160T: ?Sized,\160{\n    fn as_ref(&self) -> &T;\n}"]
 ,Div ("",[],[])
  [Para [Str "Used",Str " ",Str "to",Str " ",Str "do",Str " ",Str "a",Str " ",Str "cheap",Str " ",Str "reference-to-reference",Str " ",Str "conversion."]
  ,Para [Str "This",Str " ",Str "trait",Str " ",Str "is",Str " ",Str "similar",Str " ",Str "to",Str " ",Link ("",[],[]) [Code ("",[],[]) "AsMut"] ("../../std/convert/trait.AsMut.html","`AsMut`"),Str " ",Str "which",Str " ",Str "is",Str " ",Str "used",Str " ",Str "for",Str " ",Str "converting",Str " ",Str "between",Str " ",Str "mutable",Str " ",Str "references.",Str "If",Str " ",Str "you",Str " ",Str "need",Str " ",Str "to",Str " ",Str "do",Str " ",Str "a",Str " ",Str "costly",Str " ",Str "conversion",Str " ",Str "it",Str " ",Str "is",Str " ",Str "better",Str " ",Str "to",Str " ",Str "implement",Str " ",Link ("",[],[]) [Code ("",[],[]) "From"] ("../../std/convert/trait.From.html","`From`"),Str " ",Str "with",Str " ",Str "type",Code ("",[],[]) "&T",Str " ",Str "or",Str " ",Str "write",Str " ",Str "a",Str " ",Str "custom",Str " ",Str "function."]
  ,Para [Code ("",[],[]) "AsRef",Str " ",Str "has",Str " ",Str "the",Str " ",Str "same",Str " ",Str "signature",Str " ",Str "as",Str " ",Link ("",[],[]) [Code ("",[],[]) "Borrow"] ("../../std/borrow/trait.Borrow.html",""),Str ",",Str " ",Str "but",Str " ",Link ("",[],[]) [Code ("",[],[]) "Borrow"] ("../../std/borrow/trait.Borrow.html",""),Str " ",Str "is",Str " ",Str "different",Str " ",Str "in",Str " ",Str "few",Str " ",Str "aspects:"]
  ,BulletList
   [[Div ("",[],[])
     [Plain [Str "Unlike",Str " ",Code ("",[],[]) "AsRef",Str ",",Str " ",Link ("",[],[]) [Code ("",[],[]) "Borrow"] ("../../std/borrow/trait.Borrow.html",""),Str " ",Str "has",Str " ",Str "a",Str " ",Str "blanket",Str " ",Str "impl",Str " ",Str "for",Str " ",Str "any",Str " ",Code ("",[],[]) "T",Str ",",Str " ",Str "and",Str " ",Str "can",Str " ",Str "be",Str " ",Str "used",Str " ",Str "to",Str " ",Str "accept",Str " ",Str "either",Str "a",Str " ",Str "reference",Str " ",Str "or",Str " ",Str "a",Str " ",Str "value."]]]
   ,[Div ("",[],[])
     [Plain [Link ("",[],[]) [Code ("",[],[]) "Borrow"] ("../../std/borrow/trait.Borrow.html",""),Str " ",Str "also",Str " ",Str "requires",Str " ",Str "that",Str " ",Link ("",[],[]) [Code ("",[],[]) "Hash"] ("../../std/hash/trait.Hash.html",""),Str ",",Str " ",Link ("",[],[]) [Code ("",[],[]) "Eq"] ("../../std/cmp/trait.Eq.html",""),Str " ",Str "and",Str " ",Link ("",[],[]) [Code ("",[],[]) "Ord"] ("../../std/cmp/trait.Ord.html",""),Str " ",Str "for",Str " ",Str "borrowed",Str " ",Str "value",Str " ",Str "are",Str "equivalent",Str " ",Str "to",Str " ",Str "those",Str " ",Str "of",Str " ",Str "the",Str " ",Str "owned",Str " ",Str "value.",Str " ",Str "For",Str " ",Str "this",Str " ",Str "reason,",Str " ",Str "if",Str " ",Str "you",Str " ",Str "want",Str " ",Str "to",Str "borrow",Str " ",Str "only",Str " ",Str "a",Str " ",Str "single",Str " ",Str "field",Str " ",Str "of",Str " ",Str "a",Str " ",Str "struct",Str " ",Str "you",Str " ",Str "can",Str " ",Str "implement",Str " ",Code ("",[],[]) "AsRef",Str ",",Str " ",Str "but",Str " ",Str "not",Str " ",Link ("",[],[]) [Code ("",[],[]) "Borrow"] ("../../std/borrow/trait.Borrow.html",""),Str "."]]]]
  ,Para [Strong [Str "Note:",Space,Str "This",Space,Str "trait",Space,Str "must",Space,Str "not",Space,Str "fail"],Str ".",Str " ",Str "If",Str " ",Str "the",Str " ",Str "conversion",Str " ",Str "can",Str " ",Str "fail,",Str " ",Str "use",Str " ",Str "a",Str "dedicated",Str " ",Str "method",Str " ",Str "which",Str " ",Str "returns",Str " ",Str "an",Str " ",Link ("",[],[]) [Code ("",[],[]) "Option<T>"] ("../../std/option/enum.Option.html",""),Str " ",Str "or",Str " ",Str "a",Str " ",Link ("",[],[]) [Code ("",[],[]) "Result<T, E>"] ("../../std/result/enum.Result.html",""),Str "."]
  ,Plain [Link ("",[],[]) [Str "Generic",Str " ",Str "Implementations"] ("#generic-implementations","")]
  ,BulletList
   [[Div ("",[],[])
     [Plain [Code ("",[],[]) "AsRef",Str " ",Str "auto-dereferences",Str " ",Str "if",Str " ",Str "the",Str " ",Str "inner",Str " ",Str "type",Str " ",Str "is",Str " ",Str "a",Str " ",Str "reference",Str " ",Str "or",Str " ",Str "a",Str " ",Str "mutable",Str "reference",Str " ",Str "(e.g.:",Str " ",Code ("",[],[]) "foo.as_ref()",Str " ",Str "will",Str " ",Str "work",Str " ",Str "the",Str " ",Str "same",Str " ",Str "if",Str " ",Code ("",[],[]) "foo",Str " ",Str "has",Str " ",Str "type",Code ("",[],[]) "&mut Foo",Str " ",Str "or",Str " ",Code ("",[],[]) "&&mut Foo",Str ")"]]]]
  ,Plain [Link ("",[],[]) [Str "Examples"] ("#examples","")]
  ,Para [Str "By",Str " ",Str "using",Str " ",Str "trait",Str " ",Str "bounds",Str " ",Str "we",Str " ",Str "can",Str " ",Str "accept",Str " ",Str "arguments",Str " ",Str "of",Str " ",Str "different",Str " ",Str "types",Str " ",Str "as",Str " ",Str "long",Str " ",Str "as",Str " ",Str "they",Str " ",Str "can",Str " ",Str "be",Str "converted",Str " ",Str "to",Str " ",Str "the",Str " ",Str "specified",Str " ",Str "type",Str " ",Code ("",[],[]) "T",Str "."]
  ,Para [Str "For",Str " ",Str "example:",Str " ",Str "By",Str " ",Str "creating",Str " ",Str "a",Str " ",Str "generic",Str " ",Str "function",Str " ",Str "that",Str " ",Str "takes",Str " ",Str "an",Str " ",Code ("",[],[]) "AsRef<str>",Str " ",Str "we",Str " ",Str "express",Str " ",Str "that",Str " ",Str "we",Str "want",Str " ",Str "to",Str " ",Str "accept",Str " ",Str "all",Str " ",Str "references",Str " ",Str "that",Str " ",Str "can",Str " ",Str "be",Str " ",Str "converted",Str " ",Str "to",Str " ",Link ("",[],[]) [Code ("",[],[]) "&str"] ("../../std/primitive.str.html",""),Str " ",Str "as",Str " ",Str "an",Str " ",Str "argument.",Str "Since",Str " ",Str "both",Str " ",Link ("",[],[]) [Code ("",[],[]) "String"] ("../../std/string/struct.String.html",""),Str " ",Str "and",Str " ",Link ("",[],[]) [Code ("",[],[]) "&str"] ("../../std/primitive.str.html",""),Str " ",Str "implement",Str " ",Code ("",[],[]) "AsRef<str>",Str " ",Str "we",Str " ",Str "can",Str " ",Str "accept",Str " ",Str "both",Str " ",Str "as",Str " ",Str "input",Str " ",Str "argument."]
  ,Div ("",[],[])
   [CodeBlock ("",["rust","rust-example-rendered"],[]) "fn is_hello<T: AsRef<str>>(s: T) {\n   assert_eq!(\"hello\", s.as_ref());\n}\n\nlet s = \"hello\";\nis_hello(s);\n\nlet s = \"hello\".to_string();\nis_hello(s);"
   ,Null]]
 ,Header 2 ("required-methods",["small-section-header"],[]) [Str "Required",Str " ",Str "methods",Link ("",[],[]) [] ("#required-methods","")]
 ,Div ("",[],[])
  [Header 3 ("tymethod.as_ref",["method"],[]) [Code ("as_ref.v",[],[]) "fn as_ref(&self) -> &T"]
  ,Div ("",[],[])
   [Para [Str "Performs",Str " ",Str "the",Str " ",Str "conversion."]]]
 ,Div ("",[],[])
  [Header 4 ("",[],[]) []
  ,Plain [Span ("",[],[]) []]]
 ,Header 2 ("",[],[]) [Link ("",[],[]) [Str "Implementors"] ("#implementors","Implementors")]
 ,Div ("",[],[])
  [Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl AsRef<[u8]> for str"] ("#impl-AsRef%3C%5Bu8%5D%3E","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-1",[],[]) "fn as_ref(&self) -> &[u8]"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl AsRef<[u8]> for String"] ("#impl-AsRef%3C%5Bu8%5D%3E-1","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-2",[],[]) "fn as_ref(&self) -> &[u8]"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl AsRef<str> for str"] ("#impl-AsRef%3Cstr%3E","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-3",[],[]) "fn as_ref(&self) -> &str"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl AsRef<str> for String"] ("#impl-AsRef%3Cstr%3E-1","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-4",[],[]) "fn as_ref(&self) -> &str"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl AsRef<CStr> for CStr"] ("#impl-AsRef%3CCStr%3E","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-5",[],[]) "fn as_ref(&self) -> &CStr"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl AsRef<CStr> for CString"] ("#impl-AsRef%3CCStr%3E-1","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-6",[],[]) "fn as_ref(&self) -> &CStr"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl AsRef<OsStr> for str"] ("#impl-AsRef%3COsStr%3E","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-7",[],[]) "fn as_ref(&self) -> &OsStr"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl AsRef<OsStr> for OsStr"] ("#impl-AsRef%3COsStr%3E-1","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-8",[],[]) "fn as_ref(&self) -> &OsStr"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl AsRef<OsStr> for OsString"] ("#impl-AsRef%3COsStr%3E-2","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-9",[],[]) "fn as_ref(&self) -> &OsStr"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl AsRef<OsStr> for Path"] ("#impl-AsRef%3COsStr%3E-3","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-10",[],[]) "fn as_ref(&self) -> &OsStr"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl AsRef<OsStr> for PathBuf"] ("#impl-AsRef%3COsStr%3E-4","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-11",[],[]) "fn as_ref(&self) -> &OsStr"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl AsRef<OsStr> for String"] ("#impl-AsRef%3COsStr%3E-5","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-12",[],[]) "fn as_ref(&self) -> &OsStr"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl AsRef<Path> for str"] ("#impl-AsRef%3CPath%3E","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-13",[],[]) "fn as_ref(&self) -> &Path"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl AsRef<Path> for OsStr"] ("#impl-AsRef%3CPath%3E-1","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-14",[],[]) "fn as_ref(&self) -> &Path"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl AsRef<Path> for OsString"] ("#impl-AsRef%3CPath%3E-2","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-15",[],[]) "fn as_ref(&self) -> &Path"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl AsRef<Path> for Path"] ("#impl-AsRef%3CPath%3E-3","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-16",[],[]) "fn as_ref(&self) -> &Path"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl AsRef<Path> for PathBuf"] ("#impl-AsRef%3CPath%3E-4","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-17",[],[]) "fn as_ref(&self) -> &Path"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl AsRef<Path> for String"] ("#impl-AsRef%3CPath%3E-5","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-18",[],[]) "fn as_ref(&self) -> &Path"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl<'_> AsRef<OsStr> for Component<'_>"] ("#impl-AsRef%3COsStr%3E-6","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-19",[],[]) "fn as_ref(&self) -> &OsStr"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl<'_> AsRef<OsStr> for Components<'_>"] ("#impl-AsRef%3COsStr%3E-7","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-20",[],[]) "fn as_ref(&self) -> &OsStr"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl<'_> AsRef<OsStr> for std::path::Iter<'_>"] ("#impl-AsRef%3COsStr%3E-8","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-21",[],[]) "fn as_ref(&self) -> &OsStr"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl<'_> AsRef<Path> for Cow<'_, OsStr>"] ("#impl-AsRef%3CPath%3E-6","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-22",[],[]) "fn as_ref(&self) -> &Path"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl<'_> AsRef<Path> for Component<'_>"] ("#impl-AsRef%3CPath%3E-7","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-23",[],[]) "fn as_ref(&self) -> &Path"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl<'_> AsRef<Path> for Components<'_>"] ("#impl-AsRef%3CPath%3E-8","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-24",[],[]) "fn as_ref(&self) -> &Path"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl<'_> AsRef<Path> for std::path::Iter<'_>"] ("#impl-AsRef%3CPath%3E-9","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-25",[],[]) "fn as_ref(&self) -> &Path"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl<'_, T> AsRef<[T]> for std::slice::Iter<'_, T>"] ("#impl-AsRef%3C%5BT%5D%3E","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-26",[],[]) "fn as_ref(&self) -> &[T]"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl<'_, T> AsRef<T> for Cow<'_, T> where\160\160\160\160T: ToOwned + ?Sized,\160"] ("#impl-AsRef%3CT%3E","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-27",[],[]) "fn as_ref(&self) -> &T"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl<'_, T, U> AsRef<U> for &'_ T where\160\160\160\160T: AsRef<U> + ?Sized,\160\160\160\160U: ?Sized,\160"] ("#impl-AsRef%3CU%3E","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-28",[],[]) "fn as_ref(&self) -> &U"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl<'_, T, U> AsRef<U> for &'_ mut T where\160\160\160\160T: AsRef<U> + ?Sized,\160\160\160\160U: ?Sized,\160"] ("#impl-AsRef%3CU%3E-1","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-29",[],[]) "fn as_ref(&self) -> &U"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl<T> AsRef<[T]> for [T]"] ("#impl-AsRef%3C%5BT%5D%3E-1","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-30",[],[]) "fn as_ref(&self) -> &[T]"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl<T> AsRef<[T]> for Vec<T>"] ("#impl-AsRef%3C%5BT%5D%3E-2","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-31",[],[]) "fn as_ref(&self) -> &[T]"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl<T> AsRef<Vec<T>> for Vec<T>"] ("#impl-AsRef%3CVec%3CT%3E%3E","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-32",[],[]) "fn as_ref(&self) -> &Vec<T>"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl<T> AsRef<T> for Box<T> where\160\160\160\160T: ?Sized,\160"] ("#impl-AsRef%3CT%3E-1","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-33",[],[]) "fn as_ref(&self) -> &T"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl<T> AsRef<T> for Rc<T> where\160\160\160\160T: ?Sized,\160"] ("#impl-AsRef%3CT%3E-2","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-34",[],[]) "fn as_ref(&self) -> &T"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl<T> AsRef<T> for Arc<T> where\160\160\160\160T: ?Sized,\160"] ("#impl-AsRef%3CT%3E-3","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-35",[],[]) "fn as_ref(&self) -> &T"]
  ,Header 3 ("",[],[]) [Link ("",[],[]) [Code ("",["in-band"],[]) "impl<const N:\160usize, T> AsRef<[T]> for [T; N] where\160\160\160\160[T; N]: LengthAtMost32,\160"] ("#impl-AsRef%3C%5BT%5D%3E-3","")]
  ,Header 4 ("",[],[]) [Code ("as_ref.v-36",[],[]) "fn as_ref(&self) -> &[T]"]]
 ,Div ("",[],[])
  [Header 4 ("",[],[]) []
  ,Plain [Span ("",[],[]) []]]]
,Div ("",[],[])
 []
,Div ("",[],[])
 []]
